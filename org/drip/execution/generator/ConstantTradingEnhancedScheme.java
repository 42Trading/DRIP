
package org.drip.execution.generator;

/*
 * -*- mode: java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 */

/*!
 * Copyright (C) 2016 Lakshmi Krishnamurthy
 * 
 *  This file is part of DRIP, a free-software/open-source library for fixed income analysts and developers -
 * 		http://www.credit-trader.org/Begin.html
 * 
 *  DRIP is a free, full featured, fixed income rates, credit, and FX analytics library with a focus towards
 *  	pricing/valuation, risk, and market making.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *   	you may not use this file except in compliance with the License.
 *   
 *  You may obtain a copy of the License at
 *  	http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  	distributed under the License is distributed on an "AS IS" BASIS,
 *  	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  
 *  See the License for the specific language governing permissions and
 *  	limitations under the License.
 */

/**
 * ConstantTradingEnhancedScheme contains the Constant Volatility Trading Trajectory generated by the Almgren
 *  and Chriss (2003) Scheme under the Criterion of No-Drift AND Constant Temporary Impact Volatility. The
 *   References are:
 * 
 * 	- Almgren, R., and N. Chriss (1999): Value under Liquidation, Risk 12 (12).
 * 
 * 	- Almgren, R., and N. Chriss (2000): Optimal Execution of Portfolio Transactions, Journal of Risk 3 (2)
 * 		5-39.
 * 
 * 	- Almgren, R. (2003): Optimal Execution with Nonlinear Impact Functions and Trading-Enhanced Risk,
 * 		Applied Mathematical Finance 10 (1) 1-18.
 * 
 * 	- Almgren, R., and N. Chriss (2003): Bidding Principles, Risk 97-102.
 * 
 * 	- Bertsimas, D., and A. W. Lo (1998): Optimal Control of Execution Costs, Journal of Financial Markets,
 * 		1, 1-50.
 * 
 * @author Lakshmi Krishnamurthy
 */

public class ConstantTradingEnhancedScheme extends
	org.drip.execution.generator.OptimalContinuousTrajectoryScheme {

	/**
	 * Create the Standard ConstantTradingEnhancedScheme Instance
	 * 
	 * @param dblStartHoldings Trajectory Start Holdings
	 * @param dblFinishTime Trajectory Finish Time
	 * @param tevp Almgren 2003 Impact Price Walk Parameters
	 * @param dblRiskAversion The Risk Aversion Parameter
	 * 
	 * @return The ConstantTradingEnhancedScheme Instance
	 */

	public static final ConstantTradingEnhancedScheme Standard (
		final double dblStartHoldings,
		final double dblFinishTime,
		final org.drip.execution.dynamics.TradingEnhancedVolatilityParameters tevp,
		final double dblRiskAversion)
	{
		try {
			return new ConstantTradingEnhancedScheme (new org.drip.execution.strategy.OrderSpecification
				(dblStartHoldings, dblFinishTime), tevp, new
					org.drip.execution.risk.MeanVarianceObjectiveUtility (dblRiskAversion));
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	private ConstantTradingEnhancedScheme (
		final org.drip.execution.strategy.OrderSpecification os,
		final org.drip.execution.dynamics.TradingEnhancedVolatilityParameters tevp,
		final org.drip.execution.risk.MeanVarianceObjectiveUtility mvou)
		throws java.lang.Exception
	{
		super (os, tevp, mvou);
	}

	@Override public org.drip.execution.optimum.EfficientTradingTrajectory generate()
	{
		org.drip.execution.dynamics.TradingEnhancedVolatilityParameters tevp =
			(org.drip.execution.dynamics.TradingEnhancedVolatilityParameters) priceWalkParameters();

		double dblLambda = ((org.drip.execution.risk.MeanVarianceObjectiveUtility)
			objectiveUtility()).riskAversion();

		double dblEta = tevp.linearTemporaryExpectation().slope();

		double dblAlpha = tevp.linearTemporaryVolatility().offset();

		org.drip.execution.strategy.OrderSpecification os = orderSpecification();

		final double dblX = os.size();

		double dblSigma = tevp.arithmeticPriceDynamicsSettings().volatility();

		final double dblTStar = java.lang.Math.sqrt ((dblEta + dblLambda * dblAlpha * dblAlpha) / (dblLambda
			* dblSigma * dblSigma));

		double dblE = 0.5 * dblEta * dblX * dblX / dblTStar;

		double dblV = 0.5 * dblX * dblX * dblSigma * dblSigma * dblTStar * (1. + (dblAlpha * dblAlpha /
			(dblSigma * dblSigma * dblTStar * dblTStar)));

		org.drip.function.definition.R1ToR1 holdingsR1ToR1 = new org.drip.function.definition.R1ToR1 (null) {
			@Override public double evaluate (
				final double dblT)
				throws java.lang.Exception
			{
				if (!org.drip.quant.common.NumberUtil.IsValid (dblT))
					throw new java.lang.Exception
						("ConstantTradingEnhancedScheme::generate::evaluate => Invalid Inputs");

				return dblX * java.lang.Math.pow (java.lang.Math.E, -1. * dblT/ dblTStar);
			}
		};

		try {
			return org.drip.execution.optimum.EfficientContinuousTradingTrajectory.Standard
				(os.maxExecutionTime(), dblE, dblV, dblTStar, holdingsR1ToR1);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		return null;
	}
}
