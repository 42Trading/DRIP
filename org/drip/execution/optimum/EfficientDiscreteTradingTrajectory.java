
package org.drip.execution.optimum;

/*
 * -*- mode: java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 */

/*!
 * Copyright (C) 2016 Lakshmi Krishnamurthy
 * 
 *  This file is part of DRIP, a free-software/open-source library for fixed income analysts and developers -
 * 		http://www.credit-trader.org/Begin.html
 * 
 *  DRIP is a free, full featured, fixed income rates, credit, and FX analytics library with a focus towards
 *  	pricing/valuation, risk, and market making.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *   	you may not use this file except in compliance with the License.
 *   
 *  You may obtain a copy of the License at
 *  	http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  	distributed under the License is distributed on an "AS IS" BASIS,
 *  	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  
 *  See the License for the specific language governing permissions and
 *  	limitations under the License.
 */

/**
 * EfficientDiscreteTradingTrajectory contains the Discrete Trading Trajectory generated by a given Optimal
 *  Trajectory Generation Scheme. Schemes may be Numerical or Closed Form. The References are:
 * 
 * 	- Almgren, R., and N. Chriss (1999): Value under Liquidation, Risk 12 (12).
 * 
 * 	- Almgren, R., and N. Chriss (2000): Optimal Execution of Portfolio Transactions, Journal of Risk 3 (2)
 * 		5-39.
 * 
 * 	- Bertsimas, D., and A. W. Lo (1998): Optimal Control of Execution Costs, Journal of Financial Markets,
 * 		1, 1-50.
 *
 * 	- Chan, L. K. C., and J. Lakonishak (1995): The Behavior of Stock Prices around Institutional Trades,
 * 		Journal of Finance, 50, 1147-1174.
 *
 * 	- Keim, D. B., and A. Madhavan (1997): Transaction Costs and Investment Style: An Inter-exchange
 * 		Analysis of Institutional Equity Trades, Journal of Financial Economics, 46, 265-292.
 * 
 * @author Lakshmi Krishnamurthy
 */

public class EfficientDiscreteTradingTrajectory extends org.drip.execution.strategy.DiscreteTradingTrajectory
{
	private double _dblTransactionCostVariance = java.lang.Double.NaN;
	private double _dblTransactionCostExpectation = java.lang.Double.NaN;

	/**
	 * Construct a Standard EfficientDiscreteTradingTrajectory Instance
	 * 
	 * @param adblExecutionTimeNode Array containing the Trajectory Time Nodes
	 * @param adblHoldings Array containing the Holdings
	 * @param apep The Arithmetic Price Walk Evolution Parameters
	 * 
	 * @return The EfficientDiscreteTradingTrajectory Instance
	 */

	public static EfficientDiscreteTradingTrajectory Standard (
		final double[] adblExecutionTimeNode,
		final double[] adblHoldings,
		final org.drip.execution.dynamics.ArithmeticPriceEvolutionParameters apep)
	{
		org.drip.execution.strategy.DiscreteTradingTrajectory tt =
			org.drip.execution.strategy.DiscreteTradingTrajectory.Standard (adblExecutionTimeNode,
				adblHoldings);

		if (null == tt) return null;

		try {
			org.drip.measure.gaussian.R1UnivariateNormal r1un = (new
				org.drip.execution.capture.TrajectoryShortfallEstimator (tt)).totalCostDistributionSynopsis
					(apep);

			return null == r1un ? null : new EfficientDiscreteTradingTrajectory (adblExecutionTimeNode,
				adblHoldings, tt.tradeList(), r1un.mean(), r1un.variance());
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	/**
	 * EfficientDiscreteTradingTrajectory Constructor
	 * 
	 * @param adblExecutionTimeNode Array containing the Trajectory Time Nodes
	 * @param adblHoldings Array containing the Holdings
	 * @param adblTradeList Array containing the Trade List
	 * @param dblTransactionCostExpectation The Expected Transaction Cost
	 * @param dblTransactionCostVariance The Variance of the Transaction Cost
	 * 
	 * @throws java.lang.Exception Thrown if the Inputs are Invalid
	 */

	public EfficientDiscreteTradingTrajectory (
		final double[] adblExecutionTimeNode,
		final double[] adblHoldings,
		final double[] adblTradeList,
		final double dblTransactionCostExpectation,
		final double dblTransactionCostVariance)
		throws java.lang.Exception
	{
		super (adblExecutionTimeNode, adblHoldings, adblTradeList);

		if (!org.drip.quant.common.NumberUtil.IsValid (_dblTransactionCostExpectation =
			dblTransactionCostExpectation) || !org.drip.quant.common.NumberUtil.IsValid
				(_dblTransactionCostVariance = dblTransactionCostVariance))
			throw new java.lang.Exception
				("EfficientDiscreteTradingTrajectory Constructor => Invalid Inputs");
	}

	/**
	 * Retrieve the Expected Transaction Cost
	 * 
	 * @return The Expected Transaction Cost
	 */

	public double transactionCostExpectation()
	{
		return _dblTransactionCostExpectation;
	}

	/**
	 * Retrieve the Variance of the Expected Transaction Cost
	 * 
	 * @return The Variance of the Expected Transaction Cost
	 */

	public double transactionCostVariance()
	{
		return _dblTransactionCostVariance;
	}
}
